#!/usr/bin/env python
from __future__ import print_function
from hashlib import sha1
from _py2with3compatibility import Request, urlopen, urlencode, unquote, HTTPSHandler, build_opener, install_opener, HTTPSConnection
import os, sys, json, hmac, re

print("Content-Type: text/html\n")
print("You have reached the Fermilab GITHUB WEBHOOK processor.\n")
BASE_DIRECTORY = "/web/sites/s/scd-ci.fnal.gov/data"
PEM_FILE = '%s/ci_cert.pem' % BASE_DIRECTORY

#Authenticate connection with certificate/key 
class HTTPSClientAuthHandler(HTTPSHandler):
  def __init__(self, cert):
      HTTPSHandler.__init__(self)
      if cert:
          if isinstance(cert, basestring):
              self.cert = self.key = cert
          else:
              self.cert, self.key = cert
          try:
              # python 2.7.9 support
              from ssl import create_default_context, CERT_NONE
              """ could allow verification with something like
              context = create_default_context(capath="/etc/grid-security/certificates")
              """
              context = create_default_context()
              # disable certificate verification
              context.check_hostname = False
              context.verify_mode = CERT_NONE

              # load the client cert
              context.load_cert_chain(self.cert, self.key)
              self.connargs = { 'context' : context }
          except ImportError:
              # older python
              self.connargs = { "key_file" : self.key, "cert_file" : self.cert }
      else:
          self.connargs = {}

  def https_open(self, req):
      # Rather than pass in a reference to a connection class, we pass in
      # a reference to a function which, for all intents and purposes,
      # will behave as a constructor
      return self.do_open(self.getConnection, req)

  def getConnection(self, host, timeout=300):
      return HTTPSConnection(host, **self.connargs)

opener=build_opener(HTTPSClientAuthHandler(PEM_FILE))
install_opener(opener)


def check_event(data, repo_config):
  if not 'HTTP_X_GITHUB_EVENT' in os.environ: return False,''
  event = os.environ['HTTP_X_GITHUB_EVENT']
  if not event in ['issues', 'issue_comment', 'pull_request' , 'push']: 
    print('Unhandled github event type "%s"\n' % event)
    return False,event
  ok_event = False
  try:
    try:
      if repo_config.OPEN_ISSUE_FOR_PUSH_TESTS:
        repo_config.VALID_WEB_HOOKS = repo_config.VALID_WEB_HOOKS+['issues', 'issue_comment']
    except: pass
    if repo_config.VALID_WEB_HOOKS:
      for ex in repo_config.VALID_WEB_HOOKS:
        if re.match('^'+ex+'$',event):
          ok_event = True
          break
      if not ok_event:
        print("ERROR: No web hook matched the event",event)
        return False,event
  except: pass
  full_name = data['repository']['full_name']
  if (not ok_event) and (not is_valid_gh_repo(full_name)):
    print('Github event type "%s" is not configured for repo "%s"\n' % (event, full_name))
    return False,event
  if (event == 'push'):
    branch = data["ref"]
    if not branch.startswith("refs/heads/"):
      print('Repo "%s" ref "%s" does not start with "refs/heads/".\n' % (full_name, branch))
      return False, event
    if not ok_event:
      if not get_repository_hooks(full_name,"Jenkins_Github_Hook_Push"):
        print('Github event type "%s" is not configured for repo "%s"\n' % (event, full_name))
        return False,event
    return True, event
    #branch = branch.replace("refs/heads/","")
    #if branch=="master": return True, event
    #repo = data['repository']['name']
    #if (repo in ['cmssw']) and branch.startswith("CMSSW_"): return True, event
    #if (repo in ['cmsdist']) and branch.startswith("IB/CMSSW_"): return True, event
    #return False, event
  if (not ok_event) and (not get_repository_hooks(full_name,"Jenkins_Github_Hook")):
    print('Github event type "%s" is not configured for repo "%s"\n' % (event, full_name))
    return False,event
  if (event == 'pull_request'):
    return True,event
  elif (event == 'issues') and (not data['action'] in ['opened']):
    print('Repo %s: event is "issues" but action "%s" in not in "%s".\n' % (full_name, data['action'], ['opened']))
    return False,event
  elif (event == 'issue_comment'):
    #if (not data['action'] in ['created','edited','deleted']): return False,event
    if not full_name in ['cms-sw/cmsdist','cms-sw/cmssw']:
      print('Github event type "%s" is configured for repo "%s"\n' % (event, full_name))
      return True,event
    #from categories import USERS_TO_TRIGGER_HOOKS as l2
    #from releases import USERS_TO_TRIGGER_HOOKS as managers
    #extra_testers = set([lab['name'][6:] for lab in data['issue']['labels'] if lab['name'].startswith('allow-')])
    #valid_admins = l2 | managers | extra_testers
    valid_admins = ['gartung', 'lgarren', 'knoepfel', 'erica-snider']
    if not data['comment']['user']['login'] in valid_admins:
      try:
        from cmsdist_merge_permissions import isValidWebHook
        return isValidWebHook(data), "comp_issue_comment"
      except Exception as e: pass
      print('Repo %s/%s: event is "issue_comment" but user "%s" is not in valid_admins "%s".\n' % (org, repo, user,valid_admins))
      return False, event

  return True, event

#check signature function
def check_signature(data):
  if not 'HTTP_X_HUB_SIGNATURE' in os.environ: return False
  sha_name, signature = os.environ['HTTP_X_HUB_SIGNATURE'].split('=')
  if sha_name != 'sha1': return False
  secret_file = BASE_DIRECTORY+'/github_master_secret'
  print('Trying GITHUB_WEBHOOK_TOKEN from repo_config for signature authentication.\n')
  from commands import getstatusoutput as run_cmd
  try:
    err, out = run_cmd('echo "%s" | openssl enc -d -a -base64 -aes-256-cbc -salt -pass file:%s' % (repo_config.GITHUB_WEBHOOK_TOKEN, secret_file))
    #print(err, out)
    if err: return False
    secret = out.strip("\n")
  except:
    try:
      secret = open(secret_file).read().split('\n')[0].strip()
      print('Trying secret from file github_master_secret for signature authentication.\n')
    except Exception as e:
      print("Unable to read master secret file" % secret_file)
      return False
  mac = hmac.new(str(secret), msg=data, digestmod=sha1)
  #print(str(mac.hexdigest()) , str(signature))
  return str(mac.hexdigest()) == str(signature)

#check source ip in white list fucntion
def check_ip():
  sip = os.environ['REMOTE_ADDR']
  if 'HTTP_X_FORWARDED_FOR' in os.environ and os.environ['HTTP_X_FORWARDED_FOR']!='':
    sip = os.environ['HTTP_X_FORWARDED_FOR']
  #print("GH IP",sip)
  for ip_net in [i.strip() for i in open(BASE_DIRECTORY+'/github-hook-meta.txt').readlines()]:
    ip, mask = ip_net.split('/')
    mask = int(mask)
    ip = ''.join(["{0:08b}".format(int(i)) for i in ip.split('.') ])[0:mask]
    src_ip = ''.join([ "{0:08b}".format(int(i)) for i in sip.split('.')])[0:mask]
    #print("Checking %s vs %s" % (ip, src_ip))
    if ip == src_ip:
      return True
  return False

#get data
data = sys.stdin.read()
try:
  payload = json.loads(data)
except Exception as e:
  print("Invalid data, can not read json input")
  sys.exit()


if 'HTTP_X_GITHUB_EVENT' in os.environ:
  event = os.environ['HTTP_X_GITHUB_EVENT']
  if not event in ['issues', 'issue_comment', 'pull_request' , 'push']: 
    print('Unhandled github event type "%s"\n' % event)
    sys.exit()

repo_name = payload["repository"]["full_name"]
sys.path.insert(0,os.path.join(BASE_DIRECTORY,"cms-bot"))
sys.path.insert(0,os.path.join(BASE_DIRECTORY,"cms-bot/repos",repo_name.replace("-","_")))
import repo_config
from github_hooks_config import get_repository_hooks, is_valid_gh_repo

#keep a copy of the json sent from Github
if 'HTTP_X_GITHUB_DELIVERY' in os.environ:
  filename = os.environ['HTTP_X_GITHUB_DELIVERY']
else:
  filename = "github_hook_data"

with open('%s/%s.json' % (BASE_DIRECTORY,filename), 'w') as f:
    json.dump(payload, f)

#check valid IP of source
if check_ip():
  print('Passed GitHub IP address range check\n')
else:
  print('Failed GitHub IP address range check\n')
# non fatal as access is controled by cgi-bin/.htaccess

#check valid signature of source
if check_signature(data):
  print('Passed GitHub signature authentication\n')
else:
  print('Failed GitHub signature authentication\n')
  sys.exit()


#check valid data of source
valid, event = check_event(payload, repo_config)
if valid:
  print('Passed GitHub event validation\n')
else:
  print('Failed GitHub event validation\n')
  sys.exit()

xparam = []
xparam.append({"name":"REPOSITORY","value":repo_name})
xparam.append({"name":"EVENT","value":event})
try: xparam.append({"name":"ACTION","value":payload['action']})
except: xparam.append({"name":"ACTION","value":""})
if ("labeled" in xparam[-1]["value"]) and (not repo_name.startswith("cms-sw/")):
  print("Ignored Event/Action:", xparam)
  sys.exit()

etype=""
if   event in ['pull_request']:etype="pull_request"
elif event in ['issues', 'issue_comment','comp_issue_comment']: etype="issue"
try: xparam.append({"name":"ISSUE_NUMBER","value":payload[etype]["number"]})
except: xparam.append({"name":"ISSUE_NUMBER","value":""})
try: xparam.append({"name":"TITLE","value":payload[etype]["title"]})
except: xparam.append({"name":"TITLE","value":""})
try: xparam.append({"name":"BRANCH","value":payload[etype]["base"]["ref"]})
except:
  try: xparam.append({"name":"BRANCH","value":payload["ref"]})
  except: xparam.append({"name":"BRANCH","value":""})
if 'commits' in payload: xparam.append({"name":"COMMITS","value":' '.join([str(c['id']) for c in payload['commits']])})
else: xparam.append({"name":"COMMITS","value":""})

# get a crumb from jenkins crumbIssuer
headers=dict()
crumbreq=Request(url='https://buildmaster.fnal.gov/buildmaster/crumbIssuer/api/json')
crumbread = urlopen(crumbreq).read()
crumbjson=json.loads(crumbread)
crumb={crumbjson['crumbRequestField'] : crumbjson['crumb']}
headers.update(crumb)


#trigger jenkins job
for x in [(json.dumps({"parameter":xparam}),"dispatch-github-webhook")]:
  jenkins_parameters, job = x
  if not job: continue
  url = 'https://buildmaster.fnal.gov/buildmaster/job/GithubIntegration/job/%s/build' % job
  print(jenkins_parameters,url)
  data = {
              "json": jenkins_parameters,
              "Submit": "Build"
         }
  try:
    data = urlencode(data)
    req = Request(url=url,data=data,headers=headers)
    content = urlopen(req).read()
  except Exception as e:
    print("Unable to start jenkins job:",e)

#!/usr/bin/env python
print "Content-Type: text/html\n"

import os , sys , cgi , json , pycurl , hmac, re
from hashlib import sha1
import urllib2, urllib

BASE_DIRECTORY = "/data"

def check_event(data):
  if not 'HTTP_X_GITHUB_EVENT' in os.environ: return False,''
  event = os.environ['HTTP_X_GITHUB_EVENT']
  if not event in ['issues', 'issue_comment', 'pull_request' , 'push']: return False,event
  if (event == 'push'):
    branch = data["ref"]
    if not branch.startswith("refs/heads/"):
      return False, event
    if (not data['repository']['full_name'] in ['cms-sw/cms-bot', 'cms-sw/cmsdist', 'cms-sw/cmssw', 'cms-sw/cmssdt-web']):
      return False,event
    repo = data['repository']['name']
    branch = branch.replace("refs/heads/","")
    if (repo in ['cms-bot', 'cms-sw/cmssdt-web']) or (branch=="master"):
      return True, event
    elif (repo in ['cmssw']) and branch.startswith("CMSSW_"):
      return True, event
    elif (repo in ['cmsdist']) and branch.startswith("IB/CMSSW_"):
      return True, event
    return False, event
  elif (event == 'pull_request'): return True,event
  elif (event == 'issues') and (not data['action'] in ['opened']): return False,event
  elif (event == 'issue_comment'):
    if (not data['action'] in ['created']): return False,event
    if not data['repository']['full_name'] in ['cms-sw/cmsdist','cms-sw/cmssw']: return True,event
    from categories import USERS_TO_TRIGGER_HOOKS as l2
    from releases import USERS_TO_TRIGGER_HOOKS as managers
    valid_admins = l2 | managers
    if not data['comment']['user']['login'] in valid_admins:
      try:
        from cmsdist_merge_permissions import isValidWebHook
        return isValidWebHook(data), "comp_issue_comment"
      except Exception as e: pass
      return False, event
  return True, event

#check signature function
def check_signature(data, repo_config):
  if not 'HTTP_X_HUB_SIGNATURE' in os.environ: return False
  sha_name, signature = os.environ['HTTP_X_HUB_SIGNATURE'].split('=')
  if sha_name != 'sha1': return False
  secret_file = BASE_DIRECTORY+'/secrets/github_hook_secret'
  try:
    from commands import getstatusoutput as run_cmd
    err, out = run_cmd("echo '%s' | openssl enc -d -a -base64 -aes-256-cbc -salt -pass file:%s" % (repo_config.GITHUB_WEBHOOK_TOKEN, secret_file))
    if err: return False
    secret = out.strip("\n")
  except:
    try:
      secret = open(secret_file).read().split('\n')[0].strip()
    except Exception as e:
      print "Unable to read secret file"
      return False
  mac = hmac.new(str(secret), msg=data, digestmod=sha1)
  print str(mac.hexdigest()) , str(signature)
  return str(mac.hexdigest()) == str(signature)

#check source ip in white list fucntion
def check_ip():
  try:
    ip_net = open(BASE_DIRECTORY+'/sdt/github-hook-meta.txt','r').read().split('\n')[0].strip()
  except Exception as e:
    print "Unable to read github hoot meta information, using hard coded value"
    ip_net ="192.30.252.0/22"

  ip, mask = ip_net.split('/')
  mask = int(mask)
  ip = ''.join(["{0:08b}".format(int(i)) for i in ip.split('.') ])[0:mask]
  if 'HTTP_X_FORWARDED_FOR' in os.environ and os.environ['HTTP_X_FORWARDED_FOR']!='':
    src_ip = ''.join([ "{0:08b}".format(int(i)) for i in os.environ['HTTP_X_FORWARDED_FOR'].split('.')])[0:mask]
  else:
    src_ip = ''.join([ "{0:08b}".format(int(i)) for i in os.environ['REMOTE_ADDR'].split('.')])[0:mask]
  return ip == src_ip

#get data
data = sys.stdin.read()
try:
  payload = json.loads(data)
except Exception as e:
  print "Invalid data, can not read json input"
  sys.exit()

sys.path.insert(0,os.path.join(BASE_DIRECTORY,"sdt/cms-bot"))
sys.path.insert(0,os.path.join(BASE_DIRECTORY,"sdt/cms-bot/repos",payload["repository"]["full_name"]))
import repo_config

#check valid data, ip and signature of source
valid, event = check_event(payload)
print valid, event
if (not valid) or (not check_ip()) or (not check_signature(data, repo_config)):
  print "Invalid or wrong signatures"
  sys.exit()

xparam = []
xparam.append({"name":"REPOSITORY","value":payload["repository"]["full_name"]})
xparam.append({"name":"EVENT","value":event})
etype=""
if   event in ['pull_request']:etype="pull_request"
elif event in ['issues', 'issue_comment']: etype="issue"
try: xparam.append({"name":"ISSUE_NUMBER","value":payload[etype]["number"]})
except: xparam.append({"name":"ISSUE_NUMBER","value":""})
try: xparam.append({"name":"TITLE","value":payload[etype]["title"]})
except: xparam.append({"name":"TITLE","value":""})
try: xparam.append({"name":"ACTION","value":payload['action']})
except: xparam.append({"name":"ACTION","value":""})
try: xparam.append({"name":"BRANCH","value":payload[etype]["base"]["ref"]})
except:
  try: xparam.append({"name":"BRANCH","value":payload["ref"]})
  except: xparam.append({"name":"BRANCH","value":""})

#trigger jenkins job
for x in [(json.dumps({"parameter":xparam}),"github-webhook")]:
  jenkins_parameters, job = x
  if not job: continue
  url = repo_config.JENKINS_SERVER+'/job/'+ job + '/build'
  print jenkins_parameters,job
  data = {
              "json": jenkins_parameters,
              "Submit": "Build"
         }
  try:
    data=urllib.urlencode(data)
    req = urllib2.Request(url=url,data=data,headers={"ADFS_LOGIN" : "cmssdt"})
    content = urllib2.urlopen(req).read()
  except Exception as e:
    print "Unable to start jenkins job:",e
